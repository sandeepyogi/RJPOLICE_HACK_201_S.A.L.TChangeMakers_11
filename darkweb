import requests
import colorama
from colorama import Fore, Style
from pyfiglet import Figlet
from onion_link_finder import scraper  # Importing the Onion Link Finder module
from data_extraction import make_tor_request
from links_in_website import make_tor_request2
from vulnerability_scanninggg import scan_xss
from media_scraping import main2
import subprocess as subp
# Define missing constants
C = Fore.CYAN
W = Fore.WHITE
R = Fore.RED
G = Fore.GREEN
VERSION = "1.0" 
# Initialize colorama
colorama.init(autoreset=True)

def print_bold(text):
    """Print text in bold."""
    print(Style.BRIGHT + text)

def print_large_and_stylized(text):
    """Print text in a larger and stylized way."""
    fig = Figlet(font='slant')
    ascii_art = fig.renderText(text)
    print(Fore.CYAN + ascii_art)
    print(R + "Created By :- " + G + "Sandeep yogi" +W)
    print(R + "Version :- " + G + VERSION + W + '\n')

session = requests.session()
session.proxies = {}
session.proxies['http'] = 'socks5h://localhost:9050'
session.proxies['https'] = 'socks5h://localhost:9050'



def service():
    """
    Ensures Tor service is running before proceeding
    """
    print('\n' + C + "[>] Checking for tor service..." + W + '\n')
    cmd = 'systemctl is-active tor.service'
    co = subp.Popen(cmd, shell=True,stdout=subp.PIPE).communicate()[0]
    if 'inactive' in str(co):
        print(R + '[!] Tor Service Not Running..' + W + '\n')
        print(R + '[>] Tor Service is Required for this Script...')
        exit()
    else:
        print(C + "[>] Tor Service is Running..."  + W + '\n')



def scrap():
    r = session.get("http://icanhazip.com").text
    print(R + '[+]' + G  + ' Connected to Tor...')
    print(R + '[+]' + G  + ' Your Tor IP -> {}'.format(r))
def main():
    print_large_and_stylized("S.A.L.T ChangeMakers")
    print_bold(Fore.YELLOW + "\nChoose an option:")
    service()
    scrap()
    print("1. Manual")
    print("2. Automation")

    choice = input("Enter your choice (1 or 2): ")

    if choice == "1":
        print("\nYou selected Manual option.")
        print("\nChoose a manual task:")
        print("1. Onion Link Finder")
        print("2. Data Extraction")
        print("3. Media")
        print("4. links in the onion link")
        print("5. Vulnerabilities")
        manual_choice = input("Enter your choice (1, 2, 3,4, or 5): ")

        if manual_choice == "1":
            print("\nYou selected Onion Link Finder.")
            user_query = input("Enter your query: ")
            scraper(user_query)  # Call the Onion Link Finder function from the module

        elif manual_choice == "2":
            print("\nYou selected Data Extraction.")
            # Add Data Extraction logic here
            # Get input parameters for data extraction
            url = input('Enter the URL of the dark web site you want to extract data from: ')
            user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36'
            keywords = input('Enter a list of keywords to search for, separated by commas: ')
            num_links_to_crawl = 100

            # Call the Data Extraction function from the module
            make_tor_request(url, user_agent, keywords, num_links_to_crawl)

        elif manual_choice == "3":

            print("\nYou selected Media")
            main2() 
        elif manual_choice == "4":
            print("\nYou select find all links.")
            url = input('Enter the URL of the dark web site you want to extract data from: ')
            user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36'
            keywords = input('Enter a list of keywords to search for, separated by commas: ')
            num_links_to_crawl = 100

            # Call the Data Extraction function from the module
            make_tor_request2(url, user_agent, keywords, num_links_to_crawl)
            # Add Vulnerabilities logic here
        elif manual_choice == "5":
            print("\nYou selected vulnerabilities")
            onion_url = input("Enter the onion URL to scan for XSS vulnerabilities: ")
            proxies = {'http': 'socks5h://localhost:9050', 'https': 'socks5h://localhost:9050'}
            scan_xss(onion_url, proxies)

        else:
            print(Fore.RED + "\nInvalid choice. Please enter a number between 1 and 4.")

    elif choice == "2":
        print("\nYou selected Automation option.")
        # Add automation option logic here

    else:
        print(Fore.RED + "\nInvalid choice. Please enter either 1 or 2.")

if __name__ == "__main__":
    main()
